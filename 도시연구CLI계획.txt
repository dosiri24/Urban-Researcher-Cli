AI 기반 연구 자동화 CLI 도구: '가상 랩 미팅' 프로젝트 계획서
서론: 프로젝트의 시작과 궁극적 목표 (Introduction)
본 프로젝트는 도시 분야 연구자가 기존의 코딩 보조 CLI 도구를 사용하며 얻은 영감에서 시작되었다. CLI(Command-Line Interface)는 복잡한 AI 에이전트의 기능을 각 단계별로 모듈화하고, 파이프라인으로 연결하여 확장하기에 가장 적합한 형태라는 판단이 이 프로젝트의 기술적 출발점이다.
프로젝트의 궁극적인 목표는 연구자가 연구 주제를 제시하는 것만으로, CLI 도구가 자율적으로 'End-to-End' 연구 과정 전체를 수행하는 완전 자동화 시스템을 구축하는 것이다.
파트 1: CLI 도구 프레임워크 (The Shell)
이 파트는 사용자가 직접 상호작용하는 인터페이스이자, 내부의 지능형 에이전트들을 담는 '그릇'의 역할을 한다.
1.1. CLI 개발 철학
 * 모듈성(Modularity): '논문 검색', '데이터 분석' 등 각 기능을 독립적인 명령어로 분리하여 개발 및 유지보수를 용이하게 한다.
 * 자동화(Automation): 쉘 스크립팅 등을 통해 여러 명령어를 파이프라인으로 연결하여, 복잡한 연구 과정을 단 한 줄의 명령어로 실행할 수 있도록 설계한다.
 * 확장성(Scalability): 향후 새로운 분석 모델이나 데이터 소스를 쉽게 추가할 수 있는 유연한 구조를 채택한다.
1.2. 기술 스택
 * 개발 언어: Python
 * CLI 프레임워크: Click (또는 Typer)
   * 개발 방향: 기존 도구를 개조하는 대신, 본 프로젝트의 독창적인 아키텍처에 최적화된 형태로 처음부터 직접 빌드한다.
파트 2: 다중 에이전트 협업 플랫폼 (MCP - The Brain)
이 파트는 CLI 도구의 내부에 탑재되어 실질적인 연구와 추론을 수행하는 '지능'의 역할을 한다.
2.1. 핵심 아키텍처: '나선형 연구 고도화 모델'
본 시스템의 지능은 정해진 순서대로 한 번만 작동하는 것이 아니라, 스스로의 결과물을 비판하고 다음 단계의 연구 과제를 설정하여 반복적으로 작동하는 '나선형 루프(Spiral Loop)' 구조를 가진다. 이 과정을 통해 연구는 점차 더 깊고 정교한 수준으로 발전한다.
2.2. 핵심 기능: '가상 랩 미팅' (다중 에이전트 토론)
단일 AI의 한계를 극복하기 위해, 명확한 페르소나를 가진 여러 에이전트가 협업하고 토론하는 방식으로 작동한다.
 * 대학원생 Agent: 데이터를 분석하고 결과를 보고하는 실행자.
 * 지도교수 Agent: 결과의 한계를 비판하고, 인과관계 추론의 신뢰도를 높이기 위한 상위 연구 방법론을 제안하는 전략가.
파트 3: 구체적인 개발 단계 (Detailed Development Phases)
3.1. 개발 접근 방식 (Development Approach)
'기반 우선(Foundation-First)' 접근법을 채택한다. 먼저 사용자와 시스템 간의 상호작용을 담당하는 CLI 프레임워크를 견고하게 구축하고 안정화하는 데 집중한다. 이 견고한 기반 위에서, 복잡한 지능을 가진 MCP(다중 에이전트 플랫폼)의 기능들을 점진적으로 통합하고 고도화해 나간다.
3.2. 단계별 개발 로드맵 (Phased Development Roadmap)
1부: CLI 프레임워크 구축 및 안정화
Phase 1: CLI 기본 뼈대 구축
 * 목표: CLI 프로그램의 가장 기본적인 구조를 만들고 실행 가능하게 한다.
 * 핵심 제작 모듈: cli.py (메인 실행 스크립트)
 * 세부 과업:
   * Python Click을 이용해 메인 명령어 그룹(@click.group) 생성.
   * --help, --version 옵션 구현.
   * init, run 등 향후 사용할 명령어들의 빈 껍데기 함수 정의.
 * 결과물: 터미널에서 python cli.py --help 명령어가 작동하는 프로그램.
Phase 2: 설정 관리 시스템
 * 목표: 사용자의 API 키 및 기타 설정을 안전하고 영구적으로 관리한다.
 * 핵심 제작 모듈: ConfigManager (설정 파일 Read/Write 담당 클래스)
 * 세부 과업:
   * config 명령어 그룹과 set, get 하위 명령어 구현.
   * 사용자의 홈 디렉토리에 .my_agent/config.json과 같은 설정 파일을 생성하고 관리하는 로직 작성.
 * 결과물: python cli.py config set --api-key YOUR_KEY로 API 키를 저장하고 재사용할 수 있는 기능.
Phase 3: 프로젝트 관리 시스템
 * 목표: 개별 연구 프로젝트별로 작업 공간(디렉토리, 파일)을 분리하고 관리한다.
 * 핵심 제작 모듈: ProjectManager (프로젝트 디렉토리 및 상태 관리 클래스)
 * 세부 과업:
   * init <project_name> 명령어를 구현.
   * 해당 프로젝트 이름으로 디렉토리를 생성하고, 내부에 /data, /outputs, /logs 등 표준 하위 디렉토리 구조를 자동으로 만드는 기능 작성.
 * 결과물: python cli.py init "urban_regeneration_study" 실행 시, 연구를 위한 격리된 폴더가 생성됨.
2부: MCP(다중 에이전트 플랫폼) 통합 및 고도화
Phase 4: 에이전트 및 대화 시스템 MVP
 * 목표: 두 개의 AI 에이전트가 최초로 대화하는 핵심 지능을 구현한다.
 * 핵심 제작 모듈: Agent (페르소나와 대화 기록을 관리하는 클래스), DebateManager (두 에이전트 간의 대화 흐름을 제어하는 클래스)
 * 세부 과업:
   * debate 명령어에 DebateManager를 연결.
   * Agent 클래스에 LLM API 호출 로직을 포함시켜, '대학원생'과 '지도교수' 페르소나로 각각 초기화.
   * 사용자가 주제를 입력하면 두 에이전트가 대화를 주고받는 기능 완성.
 * 결과물: python cli.py debate --topic "..." 실행 시, 터미널에 두 AI의 토론 내용이 출력됨.
Phase 5: 첫 번째 도구 - 코드 실행기 제작 및 통합
 * 목표: 에이전트가 스스로 코드를 실행하여 실제 데이터 분석을 수행하는 능력을 갖춘다.
 * 핵심 제작 도구: CodeInterpreterTool (독립된 Python 파일로 제작)
 * 세부 과업:
   * Python의 subprocess 등을 이용해 외부 Python 스크립트를 안전하게 실행하고, 결과(STDOUT, STDERR)를 캡처하는 CodeInterpreterTool 클래스 구현.
   * DebateManager를 수정하여, '대학원생' 에이전트가 토론 중 이 도구를 호출할 수 있도록 연동.
 * 결과물: 에이전트가 "데이터를 분석하겠습니다"라고 말하며, 실제로 analysis.py를 실행하고 그 통계 결과를 바탕으로 토론을 이어가는 기능.
Phase 6: 도구 확장 - 문헌 연구 및 데이터 수집
 * 목표: 에이전트의 정보 수집 능력을 확장하여 외부 세계와 상호작용하게 한다.
 * 핵심 제작 도구: LiteratureReviewerTool, DataCollectorTool
 * 세부 과업:
   * Semantic Scholar API를 호출하는 LiteratureReviewerTool 클래스 구현.
   * 특정 웹사이트나 공공데이터 포털 API에 접속하는 DataCollectorTool 클래스 구현.
   * 이 도구들을 에이전트가 사용할 수 있도록 DebateManager에 등록.
 * 결과물: 에이전트가 토론 중 "관련 선행 연구를 찾아보겠습니다"라며 실시간으로 논문을 검색하거나, "최신 통계 데이터를 가져오겠습니다"라며 데이터를 수집하는 기능.
Phase 7: 자동화 루프 - 연구 계획 및 실행
 * 목표: '나선형 연구 고도화 모델'의 완전 자동화를 구현한다.
 * 핵심 제작 도구: ResearchPlanner (토론 결과를 다음 실행 계획으로 변환하는 모듈)
 * 세부 과업:
   * '지도교수' 에이전트의 제안("다음에는 OOO 변수를 통제해서 다시 분석해보게")을 파싱하여, CodeInterpreterTool이 실행할 수 있는 구체적인 명령어(예: python analysis.py --control_variable OOO)로 변환하는 ResearchPlanner 로직 구현.
   * run --auto 명령어 구현 시, 이 모듈이 작동하여 분석-토론-재분석 사이클을 자동으로 반복.
 * 결과물: 사용자의 개입 없이, 시스템이 스스로 연구를 2~3단계 이상 심화시키는 자동화된 연구 루프.
Phase 8: 최종 결과물 생성
 * 목표: 모든 과정을 종합하여 인간이 읽을 수 있는 최종 보고서를 생성한다.
 * 핵심 제작 도구: AcademicWriterTool
 * 세부 과업:
   * 프로젝트 폴더 내의 모든 로그, 토론 기록, 분석 결과, 그래프 이미지 등을 수집하는 기능 구현.
   * 수집된 모든 정보를 LLM에 전달하여, 논문 형식(서론-방법-결과-결론)에 맞는 Markdown 또는 LaTex 초안을 생성하는 로직 작성.
 * 결과물: python cli.py export 실행 시, 전체 연구 과정이 담긴 논문 초안 파일(report.md)이 생성됨.

